// <auto-generated />
using System;
using ComiCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComiAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190225155952_create_db")]
    partial class create_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComiCore.Model.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("ComiCore.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("MoviesId");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("MoviesId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ComiCore.Model.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("ComiCore.Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ComiCore.Model.GenreMovies", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("MoviesId");

                    b.HasKey("GenreId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovies");
                });

            modelBuilder.Entity("ComiCore.Model.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("Episode");

                    b.Property<int>("Kind");

                    b.Property<int>("Language");

                    b.Property<DateTime>("Manufacture");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<int>("Quality");

                    b.Property<string>("Status");

                    b.Property<DateTime>("Time");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ComiCore.Model.MoviesActor", b =>
                {
                    b.Property<int>("ActorId");

                    b.Property<int>("MoviesId");

                    b.HasKey("ActorId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesActor");
                });

            modelBuilder.Entity("ComiCore.Model.MoviesDirector", b =>
                {
                    b.Property<int>("DierctorId");

                    b.Property<int>("MoviesId");

                    b.HasKey("DierctorId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MoviesDirector");
                });

            modelBuilder.Entity("ComiCore.Model.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("MoviesId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("MoviesId");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("ComiCore.Model.Comment", b =>
                {
                    b.HasOne("ComiCore.Model.Movies", "Movies")
                        .WithMany("Comments")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiCore.Model.GenreMovies", b =>
                {
                    b.HasOne("ComiCore.Model.Genre", "Genre")
                        .WithMany("GenreMovies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiCore.Model.Movies", "Movies")
                        .WithMany("GenresMovies")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiCore.Model.MoviesActor", b =>
                {
                    b.HasOne("ComiCore.Model.Actor", "Actor")
                        .WithMany("MoviesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiCore.Model.Movies", "Movies")
                        .WithMany("MoviesActors")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiCore.Model.MoviesDirector", b =>
                {
                    b.HasOne("ComiCore.Model.Director", "Director")
                        .WithMany("MoviesDirectors")
                        .HasForeignKey("DierctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiCore.Model.Movies", "Movies")
                        .WithMany("MoviesDirectors")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiCore.Model.Trailer", b =>
                {
                    b.HasOne("ComiCore.Model.Movies", "Movies")
                        .WithMany("Trailers")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
